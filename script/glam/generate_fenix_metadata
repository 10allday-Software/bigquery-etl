#!/usr/bin/env python3
"""Generate metadata for glam based on convention."""

from pathlib import Path
import yaml
from typing import List, Dict

ROOT = Path(__file__).parent.parent.parent
DAG_NAME = "fenix_glam_etl"
PRODUCT = "org_mozilla_fenix"


def create_metadata(
    name: str,
    description: str = None,
    labels: Dict[str, str] = {},
    depends_on_past: bool = False,
    set_downstream: List[str] = [],
) -> dict:
    metadata = dict(
        friendly_name=name,
        owners=["amiyaguchi@mozilla.com"],
        labels={**dict(product=PRODUCT), **labels},
        scheduling=dict(dag_name=DAG_NAME, depends_on_past=depends_on_past),
    )
    if description:
        metadata["description"] = description
    if set_downstream:
        metadata["scheduling"]["set_downstream"] = set_downstream
    return metadata


def write_metadata(path: Path, **kwargs: dict):
    assert path.is_dir()
    assert len(list(path.glob("*.sql"))) > 0
    metadata = create_metadata(**kwargs)
    metadata_yml = path / "metadata.yaml"
    print(f"writing {metadata_yml}")
    with metadata_yml.open("w") as fp:
        fp.write(yaml.dump(metadata))
    return path.name


def main():
    glam_etl = ROOT / "sql" / "glam_etl"

    clients_daily_scalar_aggregates = []
    for query in glam_etl.glob("*clients_daily*scalars_aggregates*/"):
        write_metadata(query, name=query.name)
        clients_daily_scalar_aggregates.append(query.name)

    latest_versions = write_metadata(
        list(glam_etl.glob("*latest_versions*/"))[0],
        name=f"Latest Application Versions for {PRODUCT}",
    )

    clients_scalar_aggregates = write_metadata(
        list(glam_etl.glob("*clients_scalar_aggregates*/"))[0],
        name=f"Daily Incremental Scalar Aggregation for {PRODUCT}",
        depends_on_past=True,
        set_downstream=clients_daily_scalar_aggregates + [latest_versions],
    )

    clients_scalar_bucket_counts = write_metadata(
        list(glam_etl.glob("*clients_scalar_bucket_counts*/"))[0],
        name=f"Clients Scalar Bucket Counts for {PRODUCT}",
        set_downstream=[clients_scalar_aggregates],
    )

    clients_scalar_probe_counts = write_metadata(
        list(glam_etl.glob("*clients_scalar_probe_counts*/"))[0],
        name=f"Clients Scalar Probe Counts for {PRODUCT}",
        set_downstream=[clients_scalar_bucket_counts],
    )

    scalar_percentiles = write_metadata(
        list(glam_etl.glob("*scalar_percentiles*/"))[0],
        name=f"Scalar Percentiles for {PRODUCT}",
        set_downstream=[clients_scalar_aggregates],
    )


if __name__ == "__main__":
    main()
